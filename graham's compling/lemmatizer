#lang racket

(define list1 '(1 2 3 4 5))
(define word-list '(hello \, i like pizza very much))
(define word-list-2 '(hello i like pizza very much))

;HELPER FUNCTION FOR LEMMATIZER
(define (helper-filter input filter)
  (if (null? input)
      '()
      (if (equal? (car input) filter)
          (helper-filter (cdr input) filter)
          (cons (car input) (helper-filter (cdr input) filter)))))
      
;LEMMATIZER
(define (lemmatizer input filter)
  (if (null? filter)
      input
      (lemmatizer (helper-filter input (car filter)) (cdr filter))))

;TURNS WORDS INTO LISTS
(define (turn-into-list word)
  (map (lambda (w) (string->symbol (string w)))
       (string->list
        (symbol->string word))))

;TURNS LISTS INTO WORDS
(define (turn-into-word list)
  (string->symbol
   (apply string-append
          (map symbol->string list))))

;FOCUSED LEMMATIZER
(define (focused-lemmatizer input filter)
  (if (null? input)
      '()
      (cons (turn-into-word (lemmatizer (turn-into-list (car input)) filter)) (focused-lemmatizer (cdr input) filter))))
